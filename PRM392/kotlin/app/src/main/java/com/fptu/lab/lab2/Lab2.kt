package com.fptu.lab.lab2

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.enableEdgeToEdge
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.ElevatedButton
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.OutlinedTextField
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Shapes
import androidx.compose.material3.Text
import androidx.compose.material3.TextField
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.runtime.LaunchedEffect
import androidx.compose.runtime.getValue
import androidx.compose.runtime.mutableIntStateOf
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.remember
import androidx.compose.runtime.setValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.fptu.lab.ui.theme.labTheme
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import kotlin.toString

class Lab2 : ComponentActivity() {
    @OptIn(ExperimentalMaterial3Api::class)
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()
        setContent {
            labTheme {
                Scaffold(modifier = Modifier.fillMaxSize(), topBar = {
                    TopAppBar(
                        title = { Text("Linear Layouts in Jetpack Compose") },
                        colors = TopAppBarDefaults.topAppBarColors(
                            containerColor = Color.Red,
                            titleContentColor = Color.White

                        )
                    )

                }) { innerPadding ->
                    Text(
                        text = "Hello World!",
                        fontSize = 30.sp,
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(innerPadding)
                            .background(Color.Cyan),
                        color = Color.White
                    )
                }
            }
        }
    }
}

fun random (minRange: Int, maxRange: Int): Int {
    val min = minRange ?: 1
    val max = maxRange ?: 100
    return if(min >= max) {
        //swap value
        (max..min).random()
    } else {
        (min..max).random()
    }
}

@OptIn(ExperimentalMaterial3Api::class)
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun Lab2_Bai1_Preview() {

    var minRange by remember { mutableStateOf("1") }
    var maxRange by remember { mutableStateOf("100") }
    var result by remember { mutableIntStateOf(0) }
    var hasGenerated by remember { mutableStateOf(false) }
    var shouldGenerate by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) } // ✅ loading state

    labTheme {
        Scaffold(
            modifier = Modifier.fillMaxSize(),
            topBar = {
                TopAppBar(
                    title = { Text("True Random Number Generator") },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = Color(0xFFCCCCFF),
                        titleContentColor = Color.Black
                    )
                )
            }
        ) { innerPadding ->
            Column(
                modifier = Modifier
                    .padding(innerPadding)
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Top
            ) {

                // Min input
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceAround,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(text = "Min:", fontSize = 30.sp, color = Color.Black)
                    OutlinedTextField(
                        value = minRange,
                        onValueChange = { minRange = it },
                        label = { Text("") },
                    )
                }

                // Max input
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.SpaceAround,
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(text = "Max:", fontSize = 30.sp, color = Color.Black)
                    OutlinedTextField(
                        value = maxRange,
                        onValueChange = { maxRange = it },
                        label = { Text("") },
                    )
                }

                // Generate button
                ElevatedButton(
                    onClick = {
                        isLoading = true
                        hasGenerated = false
                        shouldGenerate = true
                    },
                    shape = Shapes().extraSmall,
                    modifier = Modifier
                        .fillMaxWidth(0.5f)
                        .padding(8.dp)
                ) {
                    Text(text = "Generate")
                }

                LaunchedEffect(shouldGenerate) {
                    if (shouldGenerate) {
                        kotlinx.coroutines.delay(1000)
                        result = random(minRange.toIntOrNull() ?: 1, maxRange.toIntOrNull() ?: 100)
                        hasGenerated = true
                        isLoading = false
                        shouldGenerate = false
                    }
                }

                Spacer(modifier = Modifier.height(20.dp))

                when {
                    isLoading -> {
                        CircularProgressIndicator()
                    }
                    hasGenerated -> {
                        val dateTime = SimpleDateFormat(
                            "yyyy-MM-dd HH:mm:ss 'UTC'",
                            Locale.getDefault()
                        ).format(Date())

                        Column {
                            Text(text = "Result:")

                            Column(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .background(Color(0xFFCCCCFF))
                                    .padding(16.dp),
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                Text(
                                    text = result.toString(),
                                    fontSize = 40.sp, // Larger font for result
                                    color = Color.Black,
                                    textAlign = TextAlign.Center
                                )
                                Text(
                                    text = "Min: $minRange, Max: $maxRange",
                                    fontSize = 20.sp, // Smaller font
                                    color = Color.Black,
                                    textAlign = TextAlign.Center
                                )
                                Text(
                                    text = dateTime,
                                    fontSize = 20.sp, // Smaller font
                                    color = Color.Black,
                                    textAlign = TextAlign.Center
                                )
                            }
                        }
                    }
                }
            }
        }
    }
}

fun doOperation(first: Int, second: Int, operation: String): Int {
    return when (operation) {
        "+" -> first + second
        "-" -> first - second
        "*" -> first * second
        "/" -> if (second != 0) first / second else 0
        else -> 0
    }
}


@OptIn(ExperimentalMaterial3Api::class)
@Preview(showBackground = true, showSystemUi = true)
@Composable
fun Lab2_Bai2_Preview() {
    var firstNumber by remember { mutableStateOf("0") }
    var secondNumber by remember { mutableStateOf("0") }
    var result by remember { mutableIntStateOf(0) }
    var hasGenerated by remember { mutableStateOf(false) }
    var shouldGenerate by remember { mutableStateOf(false) }
    var isLoading by remember { mutableStateOf(false) } // ✅ loading state
    var operation by remember { mutableStateOf("") }

    labTheme {
        Scaffold(
            modifier = Modifier.fillMaxSize(),
            topBar = {
                TopAppBar(
                    title = { Text("Tổng, Hiệu, Tích, Thương của 2 số") },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = Color(0xFFCCCCFF),
                        titleContentColor = Color.Black
                    )
                )
            }
        ) { innerPadding ->
            Column(
                modifier = Modifier
                    .padding(innerPadding)
                    .fillMaxSize(),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Top
            ) {
                TextField(
                    value = firstNumber,
                    onValueChange = { firstNumber = it },
                    label = { Text("Nhập số thứ nhất") },
                )

                TextField(
                    value = secondNumber,
                    onValueChange = { secondNumber = it },
                    label = { Text("Nhập số thứ hai") },
                )


                // Generate button
                ElevatedButton(
                    onClick = {
                        isLoading = true
                        hasGenerated = false
                        shouldGenerate = true
                        operation = "+"
                    },
                    shape = Shapes().extraSmall,
                    modifier = Modifier
                        .fillMaxWidth(0.5f)
                        .padding(8.dp)
                ) {
                    Text(text = "Cộng")
                }

                ElevatedButton(
                    onClick = {
                        isLoading = true
                        hasGenerated = false
                        shouldGenerate = true
                        operation = "-"
                    },
                    shape = Shapes().extraSmall,
                    modifier = Modifier
                        .fillMaxWidth(0.5f)
                        .padding(8.dp)
                ) {
                    Text(text = "Trừ")
                }
                ElevatedButton(
                    onClick = {
                        isLoading = true
                        hasGenerated = false
                        shouldGenerate = true
                        operation = "*"
                    },
                    shape = Shapes().extraSmall,
                    modifier = Modifier
                        .fillMaxWidth(0.5f)
                        .padding(8.dp)
                ) {
                    Text(text = "Nhân")
                }

                ElevatedButton(
                    onClick = {
                        isLoading = true
                        hasGenerated = false
                        shouldGenerate = true
                        operation = "/"
                    },
                    shape = Shapes().extraSmall,
                    modifier = Modifier
                        .fillMaxWidth(0.5f)
                        .padding(8.dp)
                ) {
                    Text(text = "Chia")
                }


                LaunchedEffect(shouldGenerate) {
                    if (shouldGenerate) {
                        kotlinx.coroutines.delay(1000)
                        result = doOperation(
                            firstNumber.toIntOrNull() ?: 0,
                            secondNumber.toIntOrNull() ?: 0,
                            operation
                        )
                        hasGenerated = true
                        isLoading = false
                        shouldGenerate = false
                    }
                }

                Spacer(modifier = Modifier.height(20.dp))

                when {
                    isLoading -> {
                        CircularProgressIndicator()
                    }
                    hasGenerated -> {
                        val dateTime = SimpleDateFormat(
                            "yyyy-MM-dd HH:mm:ss 'UTC'",
                            Locale.getDefault()
                        ).format(Date())

                        Column {
                            Text(text = "Kết quả:")

                            Column(
                                modifier = Modifier
                                    .fillMaxWidth()
                                    .background(Color(0xFFCCCCFF))
                                    .padding(16.dp),
                                horizontalAlignment = Alignment.CenterHorizontally
                            ) {
                                Text(
                                    text = "Phép tính: $firstNumber $operation $secondNumber = ",
                                    fontSize = 20.sp, // Smaller font
                                    color = Color.Black,
                                    textAlign = TextAlign.Center
                                )

                                Text(
                                    text = result.toString(),
                                    fontSize = 40.sp, // Larger font for result
                                    color = Color.Black,
                                    textAlign = TextAlign.Center
                                )


                            }
                        }
                    }
                }
            }
        }
    }

}